args: {
	// Number of instances of the DNS service to run
	scale: int | *1

	// Name of the database
	dbName: string | *"acorn_dns"

	// The AWS Route53 zone where FQDNs will be created
	route53ZoneId: string

	// The AWS access key for making Route53 requests. Shouldn't be used in production
	route53AccessKey: string

	// The AWS secret key for making Route53 requests. Shouldn't be used in production
	route53SecretKey: string
}

containers: {
	default: {
		dependsOn: "db"
		build: {
			context: "."
		}
		scale: args.scale
		ports: "4315/http"
		env: {
			// We're building a DNS that looks like "root:root@tcp(db:3306)/acorn_dns?charset=utf8mb4&parseTime=True&loc=Local"
			ACORN_DB_ENGINE: "mariadb"
			ACORN_DB_USER: "secret://db-user-credentials/username?onchange=no-action"
			ACORN_DB_PASSWORD:  "secret://db-user-credentials/password?onchange=no-action"
			ACORN_DB_HOST: "db"
			ACORN_DB_PORT: "3306"

			// These blow up
			ACORN_DB_NAME: args.dbName
			ACORN_ROUTE53_ZONE_ID: args.route53ZoneId

			// We shouldn't actually set these for prod; need to rely on IAM profiles, but setting them locally works.
			AWS_ACCESS_KEY_ID: args.route53AccessKey
			AWS_SECRET_ACCESS_KEY: agrs.route53SecretKey
		}
	},

	db: {
		image: "mariadb:10.7.4"
		env: {
			MARIADB_ROOT_PASSWORD: "secret://root-credentials/password?onchange=no-action"
			MARIADB_USER:          "secret://db-user-credentials/username?onchange=no-action"
			MARIADB_PASSWORD:      "secret://db-user-credentials/password?onchange=no-action"

			// This blows up
			MARIADB_DATABASE:      args.dbName
		}
		ports: "3306/tcp"
	}
}

secrets: {
	"root-credentials": {
		type: "basic"
		data: {
			username: "root"
		}
	}
	"db-user-credentials": {
		type: "basic"
		data: {
			username: "acorn"
		}
	}
}
